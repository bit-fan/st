{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["PERCENTAGEARRAY","App","_useState","useState","_useState2","Object","slicedToArray","estHigh","setEstHigh","_useState3","_useState4","estLow","setEstLow","_useState5","_useState6","curPrice","setCurPrice","_useState7","_useState8","totalMoney","setTotalMoney","_useState9","_useState10","showResult","setShowResult","calcResult","earn","lost","result","map","per","rate","useEffect","react_default","a","createElement","className","style","display","flexDirection","value","onChange","target","onClick","length","rowSpan","colSpan","Fragment","row","key","color","parseFloat","toFixed","Math","floor","reportWebVitals","onPerfEntry","Function","__webpack_require__","e","then","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode","src_App"],"mappings":"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","file":"static/js/main.8f6be13a.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport './App.css';\n\nconst PERCENTAGEARRAY = [100, 90, 80, 70, 60, 50, 40, 30, 20, 10, 0];\nfunction App() {\n  const [estHigh, setEstHigh] = useState(11);\n  const [estLow, setEstLow] = useState(9);\n  const [curPrice, setCurPrice] = useState(10);\n  const [totalMoney, setTotalMoney] = useState(100000);\n  const [showResult, setShowResult] = useState([]);\n  const calcResult = () => {\n    const earn = (estHigh - curPrice) / curPrice;\n    const lost = (curPrice - estLow) / curPrice;\n    const result = PERCENTAGEARRAY.map(per => {\n      const edge = earn * per - lost * (100 - per);\n      // console.log(earn, lost, edge, per);\n      return { per, rate: edge / earn };\n    });\n    setShowResult(result);\n  }\n  useEffect(() => {\n    calcResult();\n  }, [estHigh, estLow, curPrice, totalMoney])\n  return (\n    <div className=\"App\">\n      <h2>仓位计算</h2>\n      <div style={{ display: 'flex', flexDirection: 'column' }}>\n        <label>\n          总投资额： <input value={totalMoney} onChange={a => setTotalMoney(a.target.value)} />\n        </label>\n        <label>\n          预估最高： <input value={estHigh} onChange={a => setEstHigh(a.target.value)} />\n        </label>\n        <label>\n          当前股价： <input value={curPrice} onChange={a => setCurPrice(a.target.value)} />\n        </label>\n        <label>\n          预估最低： <input value={estLow} onChange={a => setEstLow(a.target.value)} />\n        </label>\n      </div>\n      <button onClick={() => calcResult()}><b>计算</b></button>\n      {showResult.length > 0 && <div>\n        <table>\n          <thead>\n            <tr>\n              <th rowSpan={2}>上涨概率</th>\n              <th colSpan={3}>建议</th>\n            </tr>\n\n            <tr>\n              <th>仓位</th>\n              {totalMoney > 0 && <>\n                <th>可买股数</th>\n                <th>可投资金</th>\n\n              </>}\n            </tr>\n          </thead>\n          <tbody>\n            {showResult.map(row => {\n              return <tr key={row.per} style={row.rate > 0 ? { color: 'black' } : { color: 'red' }}>\n                <td>{row.per}%</td>\n                <td>{parseFloat(row.rate).toFixed(0)}%</td>\n                {totalMoney > 0 &&\n                  <>\n                    <td>{Math.floor(totalMoney * row.rate / 100 / curPrice)}</td>\n                    <td>${parseFloat(Math.floor(totalMoney * row.rate / 100 / curPrice) * curPrice).toFixed(0)}</td>\n                  </>\n                }\n              </tr>\n            })}\n          </tbody>\n        </table>\n      </div>}\n\n    </div>\n\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}